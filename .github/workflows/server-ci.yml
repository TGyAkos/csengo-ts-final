name: Server Continuous Integration

on:
  push:
    branches: [ master ]

jobs:
#  analyze:
#    name: Analyze
#    runs-on: ubuntu-latest
#    needs: install-dependencies
#    permissions:
#      contents: read
#    defaults:
#      run:
#        working-directory: ./csengo-ts-server-v2
#
#    steps:
#      - uses: actions/checkout@v4
#        with:
#          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
#          token: ${{ secrets.GITHUB_TOKEN }}
#          path: csengo-ts-server-v2
#      - name: Use Node.js 22.x
#        uses: actions/setup-node@v4
#        with:
#          node-version: 22.x
#          cache-dependency-path: csengo-ts-server-v2/package-lock.json
#      - name: Restore node_modules
#        uses: actions/cache@v4
#        with:
#          path: node_modules
#          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}
#      - run: npm run test:cov
#      - uses: sonarsource/sonarqube-scan-action@v3
#        env:
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
#      # If you wish to fail your job when the Quality Gate is red, uncomment the
#      # following lines. This would typically be used to fail a deployment.
#      # - uses: sonarsource/sonarqube-quality-gate-action@master
#      #   timeout-minutes: 5
#      #   env:
#      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN


  install-dependencies:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    strategy:
      matrix:
        node-version: [ 22.x ]
#    defaults:
#      run:
#        working-directory: ./csengo-ts-server-v2

    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          path: csengo-ts-server-v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache-dependency-path: csengo-ts-server-v2/package-lock.json
      - name: Restore node_modules
        id: cache-node-modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}
      - run: npm ci
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-
        if: steps.cache-node-modules.outputs.cache-hit != 'true'

  unit-tests:
    runs-on: ubuntu-latest
    needs: install-dependencies
    permissions:
      contents: read
    strategy:
      matrix:
        node-version: [ 22.x ]

    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          path: csengo-ts-server-v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - name: Restore node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}
      - run: npm run test:cov

  e2e-tests:
    runs-on: ubuntu-latest
    needs: install-dependencies
    permissions:
      contents: read
    strategy:
      matrix:
        node-version: [ 22.x ]

    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          path: csengo-ts-server-v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - name: Restore node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}
      - run: npm run test:e2e

  build:
    name: Build Docker Image üèóÔ∏è
    runs-on: ubuntu-latest
#    needs: [ unit-tests, e2e-tests ]
    permissions:
      packages: write
      contents: read

    steps:
      - name: Check out repository code üõéÔ∏è
        uses: actions/checkout@v4
        with:
          repository: ohoks/csengo-ts-template
          ref: master
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx üöÄ
        uses: docker/setup-buildx-action@v3

      - name: Login to Registry üö¢
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push üèóÔ∏è
        uses: docker/build-push-action@v3
        with:
          context: ./csengo-ts-server-v2
          platforms: linux/amd64
          file: ./csengo-ts-server-v2/Dockerfile
          push: true
          tags: ghcr.io/pollak-projects/csengo-ts/server-app:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

#  triggerUpdate:
#    name: Trigger Update üîÑ
#    runs-on: ubuntu-latest
#    needs: build
#    steps:
#      - name: Call Webhook
#        uses: distributhor/workflow-webhook@v3
#        with:
#          webhook_url: ${{ secrets.WEBHOOK_URL }}
